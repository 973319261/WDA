<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gx.mapper.FaultCodeDAO">
  <resultMap id="BaseResultMap" type="com.gx.po.FaultCode">
    <id column="fault_code_id" jdbcType="INTEGER" property="faultCodeId" />
    <result column="dtc" jdbcType="VARCHAR" property="dtc" />
    <result column="hex_dtc" jdbcType="VARCHAR" property="hexDtc" />
    <result column="chinese_description" jdbcType="VARCHAR" property="chineseDescription" />
    <result column="english_description" jdbcType="VARCHAR" property="englishDescription" />
    <result column="operating_conditions" jdbcType="VARCHAR" property="operatingConditions" />
    <result column="setting_conditions" jdbcType="VARCHAR" property="settingConditions" />
    <result column="setting_after_conditions" jdbcType="VARCHAR" property="settingAfterConditions" />
    <result column="restore_conditions" jdbcType="VARCHAR" property="restoreConditions" />
    <result column="activate_mil_regulations" jdbcType="VARCHAR" property="activateMilRegulations" />
    <result column="mil_off_regulations" jdbcType="VARCHAR" property="milOffRegulations" />
    <result column="clear_conditions" jdbcType="VARCHAR" property="clearConditions" />
    <result column="visitor_volume" jdbcType="INTEGER" property="visitorVolume" />
  </resultMap>
  <resultMap type="com.gx.vo.FaultCodeResultVo" id="FaultCodeResultMap">
   <collection property="faultCodeVo" ofType="com.gx.vo.FaultCodeVo"  >
    <id column="fault_code_id" jdbcType="INTEGER" property="faultCodeId" />
    <result column="vehicle_id" jdbcType="INTEGER" property="vehicleId" />
	<result column="vehicle_name" jdbcType="VARCHAR" property="vehicleName" />
	<result column="configuration_level_id" jdbcType="INTEGER" property="configurationLevelId" />
    <result column="configuration_level_name" jdbcType="VARCHAR" property="configurationLevelName" />
    <result column="module_id" jdbcType="INTEGER" property="moduleId" />
    <result column="module_name" jdbcType="VARCHAR" property="moduleName" />
    <result column="supplier_id" jdbcType="INTEGER" property="supplierId" />
    <result column="supplier_name" jdbcType="VARCHAR" property="supplierName" />
    <result column="dtc" jdbcType="VARCHAR" property="dtc" />
    <result column="hex_dtc" jdbcType="VARCHAR" property="hexDtc" />
    <result column="chinese_description" jdbcType="VARCHAR" property="chineseDescription" />
    <result column="english_description" jdbcType="VARCHAR" property="englishDescription" />
    <result column="operating_conditions" jdbcType="VARCHAR" property="operatingConditions" />
    <result column="setting_conditions" jdbcType="VARCHAR" property="settingConditions" />
    <result column="setting_after_conditions" jdbcType="VARCHAR" property="settingAfterConditions" />
    <result column="restore_conditions" jdbcType="VARCHAR" property="restoreConditions" />
    <result column="activate_mil_regulations" jdbcType="VARCHAR" property="activateMilRegulations" />
    <result column="mil_off_regulations" jdbcType="VARCHAR" property="milOffRegulations" />
    <result column="clear_conditions" jdbcType="VARCHAR" property="clearConditions" />
    <result column="visitor_volume" jdbcType="INTEGER" property="visitorVolume" />
   </collection>
   <!--  一对一 嵌套vo -->
    <collection property="vehicle" ofType="com.gx.po.Vehicle" column="vehicle_id" >
     <result column="vehicle_id" jdbcType="INTEGER" property="vehicleId" />
	 <result column="vehicle_name" jdbcType="VARCHAR" property="vehicleName" />
	</collection>
	 <!--  一对一 嵌套vo -->
    <collection property="configurationLevel" ofType="com.gx.po.ConfigurationLevel" column="configuration_level_id" >
	 <result column="configuration_level_id" jdbcType="INTEGER" property="configurationLevelId" />
     <result column="configuration_level_name" jdbcType="VARCHAR" property="configurationLevelName" />
	</collection>
	 <!--  一对一 嵌套vo -->
    <collection property="module" ofType="com.gx.po.Module" column="module_id" >
     <result column="module_id" jdbcType="INTEGER" property="moduleId" />
     <result column="module_name" jdbcType="VARCHAR" property="moduleName" />
	</collection>
  </resultMap>
  
  <resultMap type="com.gx.vo.FaultCodeVo" id="FaultCodeVoResultMap">
  	<id column="fault_code_id" jdbcType="INTEGER" property="faultCodeId" />
    <result column="vehicle_id" jdbcType="INTEGER" property="vehicleId" />
    <result column="re_id" jdbcType="INTEGER" property="reId" />
	<result column="vehicle_name" jdbcType="VARCHAR" property="vehicleName" />
	<result column="configuration_level_id" jdbcType="INTEGER" property="configurationLevelId" />
    <result column="configuration_level_name" jdbcType="VARCHAR" property="configurationLevelName" />
    <result column="module_id" jdbcType="INTEGER" property="moduleId" />
    <result column="module_name" jdbcType="VARCHAR" property="moduleName" />
    <result column="supplier_id" jdbcType="INTEGER" property="supplierId" />
    <result column="supplier_name" jdbcType="VARCHAR" property="supplierName" />
    <result column="dtc" jdbcType="VARCHAR" property="dtc" />
    <result column="hex_dtc" jdbcType="VARCHAR" property="hexDtc" />
    <result column="chinese_description" jdbcType="VARCHAR" property="chineseDescription" />
    <result column="english_description" jdbcType="VARCHAR" property="englishDescription" />
    <result column="operating_conditions" jdbcType="VARCHAR" property="operatingConditions" />
    <result column="setting_conditions" jdbcType="VARCHAR" property="settingConditions" />
    <result column="setting_after_conditions" jdbcType="VARCHAR" property="settingAfterConditions" />
    <result column="restore_conditions" jdbcType="VARCHAR" property="restoreConditions" />
    <result column="activate_mil_regulations" jdbcType="VARCHAR" property="activateMilRegulations" />
    <result column="mil_off_regulations" jdbcType="VARCHAR" property="milOffRegulations" />
    <result column="clear_conditions" jdbcType="VARCHAR" property="clearConditions" />
    <result column="visitor_volume" jdbcType="INTEGER" property="visitorVolume" />
  </resultMap>
  
  <sql id="Base_Column_List">
    fault_code_id, dtc, hex_dtc, chinese_description, english_description, operating_conditions, 
    setting_conditions, setting_after_conditions, restore_conditions, activate_mil_regulations, 
    mil_off_regulations, clear_conditions, visitor_volume
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from fault_code
    where fault_code_id = #{faultCodeId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from fault_code
    where fault_code_id = #{faultCodeId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.gx.po.FaultCode">
    insert into fault_code (fault_code_id, dtc, hex_dtc, 
      chinese_description, english_description, 
      operating_conditions, setting_conditions, 
      setting_after_conditions, restore_conditions, 
      activate_mil_regulations, mil_off_regulations, 
      clear_conditions, visitor_volume)
    values (#{faultCodeId,jdbcType=INTEGER}, #{dtc,jdbcType=VARCHAR}, #{hexDtc,jdbcType=VARCHAR}, 
      #{chineseDescription,jdbcType=VARCHAR}, #{englishDescription,jdbcType=VARCHAR}, 
      #{operatingConditions,jdbcType=VARCHAR}, #{settingConditions,jdbcType=VARCHAR}, 
      #{settingAfterConditions,jdbcType=VARCHAR}, #{restoreConditions,jdbcType=VARCHAR}, 
      #{activateMilRegulations,jdbcType=VARCHAR}, #{milOffRegulations,jdbcType=VARCHAR}, 
      #{clearConditions,jdbcType=VARCHAR}, #{visitorVolume,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.gx.po.FaultCode" keyProperty="faultCodeId" useGeneratedKeys="true">
    insert into fault_code
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="faultCodeId != null">
        fault_code_id,
      </if>
      <if test="dtc != null">
        dtc,
      </if>
      <if test="hexDtc != null">
        hex_dtc,
      </if>
      <if test="chineseDescription != null">
        chinese_description,
      </if>
      <if test="englishDescription != null">
        english_description,
      </if>
      <if test="operatingConditions != null">
        operating_conditions,
      </if>
      <if test="settingConditions != null">
        setting_conditions,
      </if>
      <if test="settingAfterConditions != null">
        setting_after_conditions,
      </if>
      <if test="restoreConditions != null">
        restore_conditions,
      </if>
      <if test="activateMilRegulations != null">
        activate_mil_regulations,
      </if>
      <if test="milOffRegulations != null">
        mil_off_regulations,
      </if>
      <if test="clearConditions != null">
        clear_conditions,
      </if>
      <if test="visitorVolume != null">
        visitor_volume,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="faultCodeId != null">
        #{faultCodeId,jdbcType=INTEGER},
      </if>
      <if test="dtc != null">
        #{dtc,jdbcType=VARCHAR},
      </if>
      <if test="hexDtc != null">
        #{hexDtc,jdbcType=VARCHAR},
      </if>
      <if test="chineseDescription != null">
        #{chineseDescription,jdbcType=VARCHAR},
      </if>
      <if test="englishDescription != null">
        #{englishDescription,jdbcType=VARCHAR},
      </if>
      <if test="operatingConditions != null">
        #{operatingConditions,jdbcType=VARCHAR},
      </if>
      <if test="settingConditions != null">
        #{settingConditions,jdbcType=VARCHAR},
      </if>
      <if test="settingAfterConditions != null">
        #{settingAfterConditions,jdbcType=VARCHAR},
      </if>
      <if test="restoreConditions != null">
        #{restoreConditions,jdbcType=VARCHAR},
      </if>
      <if test="activateMilRegulations != null">
        #{activateMilRegulations,jdbcType=VARCHAR},
      </if>
      <if test="milOffRegulations != null">
        #{milOffRegulations,jdbcType=VARCHAR},
      </if>
      <if test="clearConditions != null">
        #{clearConditions,jdbcType=VARCHAR},
      </if>
      <if test="visitorVolume != null">
        #{visitorVolume,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.gx.po.FaultCode">
    update fault_code
    <set>
      <if test="dtc != null">
        dtc = #{dtc,jdbcType=VARCHAR},
      </if>
      <if test="hexDtc != null">
        hex_dtc = #{hexDtc,jdbcType=VARCHAR},
      </if>
      <if test="chineseDescription != null">
        chinese_description = #{chineseDescription,jdbcType=VARCHAR},
      </if>
      <if test="englishDescription != null">
        english_description = #{englishDescription,jdbcType=VARCHAR},
      </if>
      <if test="operatingConditions != null">
        operating_conditions = #{operatingConditions,jdbcType=VARCHAR},
      </if>
      <if test="settingConditions != null">
        setting_conditions = #{settingConditions,jdbcType=VARCHAR},
      </if>
      <if test="settingAfterConditions != null">
        setting_after_conditions = #{settingAfterConditions,jdbcType=VARCHAR},
      </if>
      <if test="restoreConditions != null">
        restore_conditions = #{restoreConditions,jdbcType=VARCHAR},
      </if>
      <if test="activateMilRegulations != null">
        activate_mil_regulations = #{activateMilRegulations,jdbcType=VARCHAR},
      </if>
      <if test="milOffRegulations != null">
        mil_off_regulations = #{milOffRegulations,jdbcType=VARCHAR},
      </if>
      <if test="clearConditions != null">
        clear_conditions = #{clearConditions,jdbcType=VARCHAR},
      </if>
      <if test="visitorVolume != null">
        visitor_volume = #{visitorVolume,jdbcType=INTEGER},
      </if>
    </set>
    where fault_code_id = #{faultCodeId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.gx.po.FaultCode">
    update fault_code
    set dtc = #{dtc,jdbcType=VARCHAR},
      hex_dtc = #{hexDtc,jdbcType=VARCHAR},
      chinese_description = #{chineseDescription,jdbcType=VARCHAR},
      english_description = #{englishDescription,jdbcType=VARCHAR},
      operating_conditions = #{operatingConditions,jdbcType=VARCHAR},
      setting_conditions = #{settingConditions,jdbcType=VARCHAR},
      setting_after_conditions = #{settingAfterConditions,jdbcType=VARCHAR},
      restore_conditions = #{restoreConditions,jdbcType=VARCHAR},
      activate_mil_regulations = #{activateMilRegulations,jdbcType=VARCHAR},
      mil_off_regulations = #{milOffRegulations,jdbcType=VARCHAR},
      clear_conditions = #{clearConditions,jdbcType=VARCHAR},
      visitor_volume = #{visitorVolume,jdbcType=INTEGER}
    where fault_code_id = #{faultCodeId,jdbcType=INTEGER}
  </update>
<!--   查询故障码信息 -->
  <select id="selectFaultCode" resultMap="FaultCodeResultMap">
 	SELECT DISTINCT v.vehicle_id,v.vehicle_name,cl.configuration_level_id,cl.configuration_level_name,
 	m.module_id,m.module_name,s.supplier_id,s.supplier_name,fc.* FROM 
	fault_code fc,re_supplier_faultcode res,re_vehicle_supplier rev,supplier s,module m,configuration_level cl,vehicle v 
	WHERE fc.fault_code_id=res.fault_code_id AND res.relevance_id=rev.relevance_id AND rev.supplier_id=s.supplier_id AND rev.module_id=m.module_id 
	AND rev.configuration_level_id=cl.configuration_level_id AND rev.vehicle_id=v.vehicle_id  AND BINARY fc.dtc LIKE CONCAT('%',#{dtc},'%') 
	<if test="vehicleId !=null and vehicleId > 0">
	  AND rev.vehicle_id=#{vehicleId} 
	</if>
	<if test="configureId !=null and configureId > 0">
	  AND rev.configuration_level_id=#{configureId}
	</if>
	<if test="moduleId !=null and moduleId > 0">
	  AND rev.module_id=#{moduleId}
	</if>
  </select>
 <!--  通过hex查询故障码信息 -->
   <select id="selectFaultCodeByHexDtc" resultMap="FaultCodeResultMap">
 	SELECT DISTINCT v.vehicle_id,v.vehicle_name,cl.configuration_level_id,cl.configuration_level_name,
 	m.module_id,m.module_name,s.supplier_id,s.supplier_name,fc.* FROM 
	fault_code fc,re_supplier_faultcode res,re_vehicle_supplier rev,supplier s,module m,configuration_level cl,vehicle v 
	WHERE fc.fault_code_id=res.fault_code_id AND res.relevance_id=rev.relevance_id AND rev.supplier_id=s.supplier_id AND rev.module_id=m.module_id 
	AND rev.configuration_level_id=cl.configuration_level_id AND rev.vehicle_id=v.vehicle_id AND BINARY fc.hex_dtc LIKE CONCAT('%',#{hexDtc},'%') 
	<if test="vehicleId !=null and vehicleId > 0">
	  AND rev.vehicle_id=#{vehicleId} 
	</if>
	<if test="configureId !=null and configureId > 0">
	  AND rev.configuration_level_id=#{configureId}
	</if>
	<if test="moduleId !=null and moduleId > 0">
	  AND rev.module_id=#{moduleId}
	</if>
  </select>
  
  
  <sql id="findSupFault">
  	SELECT ve.vehicle_id as vehicleId,ve.vehicle_name as vehicleName,con.configuration_level_name as configurationLevelName,
  		   con.configuration_level_id as configurationLevelId,mo.module_id as moduleId,mo.module_name as moduleName,
  		   sup.supplier_id as supplierId,sup.supplier_name as supplierName, rvs.relevance_id as relevanceId 
  	FROM re_vehicle_supplier rvs 
  	INNER JOIN re_supplier_faultcode re ON re.relevance_id = rvs.relevance_id
	INNER JOIN supplier sup ON rvs.supplier_id = sup.supplier_id
	INNER JOIN vehicle ve ON rvs.vehicle_id = ve.vehicle_id
	INNER JOIN configuration_level con ON rvs.configuration_level_id = con.configuration_level_id
	INNER JOIN module mo ON rvs.module_id = mo.module_id
	<where>
		1=1
		<if test="vehicleId !=0">
			and rvs.vehicle_id = #{vehicleId}
		</if>
		<if test="configurationLevelId !=0">
			and rvs.configuration_level_id = #{configurationLevelId}
		</if>
		<if test="moduleId !=0">
			and rvs.module_id = #{moduleId}
		</if>
		<if test="supplierId !=0">
			and rvs.supplier_id = #{supplierId}
		</if>
		group by re.relevance_id
	</where>
  </sql>
  <!-- 绑定故障码数据库表格 -->
  <select id="selectSupFault" resultType="com.gx.vo.FaultCodeVo">
  	<include refid="findSupFault"/>
	limit #{startIndex},#{pageSize}
  </select>
  <!-- 绑定故障码数据库表格数量 -->
  <select id="selectSupFaultCount" resultType="com.gx.vo.FaultCodeVo">
  	<include refid="findSupFault"/>
  </select>
  
  <!-- 查询故障码信息是否存在 -->
  <select id="selectFaultCodeWhetherExist" resultType="java.lang.Integer">
  	select count(fault_code.fault_code_id) from fault_code 
  	INNER JOIN re_supplier_faultcode ON re_supplier_faultcode.fault_code_id = fault_code.fault_code_id
  	where re_supplier_faultcode.relevance_id=#{relevanceId,jdbcType=INTEGER}
  	and fault_code.dtc=#{dtc,jdbcType=VARCHAR}
  </select>
  
  <!-- 查询故障码详情信息 -->
  <select id="selectfaultCodeDetailInfo" resultMap="FaultCodeVoResultMap">
  	select re_supplier_faultcode.re_id, fault_code.dtc, fault_code.hex_dtc, fault_code.chinese_description, fault_code.english_description, 
		   fault_code.operating_conditions, fault_code.setting_conditions, fault_code.setting_after_conditions, fault_code.visitor_volume,
		   fault_code.restore_conditions, fault_code.activate_mil_regulations,fault_code.mil_off_regulations,fault_code.clear_conditions,
		   supplier.supplier_id, supplier.supplier_name, vehicle.vehicle_name, configuration_level.configuration_level_name, module.module_name,
		   re_supplier_faultcode.fault_code_id,re_vehicle_supplier.relevance_id
	from fault_code
	inner join re_supplier_faultcode on re_supplier_faultcode.fault_code_id=fault_code.fault_code_id
	inner join re_vehicle_supplier on re_vehicle_supplier.relevance_id=re_supplier_faultcode.relevance_id
	inner join supplier on supplier.supplier_id=re_vehicle_supplier.supplier_id
	inner join vehicle on vehicle.vehicle_id=re_vehicle_supplier.vehicle_id
	inner join configuration_level on configuration_level.configuration_level_id=re_vehicle_supplier.configuration_level_id
	inner join module on module.module_id=re_vehicle_supplier.module_id
	where 1=1
	<if test="vehicleId !=null and vehicleId >0">
		and re_vehicle_supplier.vehicle_id=#{vehicleId,jdbcType=INTEGER}
	</if>
	<if test="configurationLevelId !=null and configurationLevelId >0">
		and re_vehicle_supplier.configuration_level_id=#{configurationLevelId,jdbcType=INTEGER}
	</if>
	<if test="moduleId !=null and moduleId >0">
		and re_vehicle_supplier.module_id=#{moduleId,jdbcType=INTEGER}
	</if>
	<if test="supplierId !=null and supplierId >0">
		and supplier.supplier_id=#{supplierId,jdbcType=INTEGER}
	</if>
	<if test="dtc !=null and dtc !=''">
		and fault_code.dtc like CONCAT('%',#{dtc,jdbcType=VARCHAR},'%')
	</if>
	<choose>
  		<when test="strName == 'visitorVolume' and sortType == 'asc' ">
  			order by fault_code.visitor_volume ASC	
  		</when>  		
  		<when test="strName == 'visitorVolume' and sortType == 'desc'">
  			order by fault_code.visitor_volume DESC	
  		</when>
  		<otherwise>
  			order by fault_code.fault_code_id DESC
  		</otherwise>
  	</choose>
  	<if test="pageSize !=null and pageSize >0">
  		limit #{startIndex,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}
  	</if>
  </select>
  
  <!-- 查询故障码详情信息(数据总条数) -->
  <select id="selectfaultCodeDetailInfoRows" resultType="java.lang.Integer">
  	select count(fault_code.fault_code_id)
	from fault_code
	inner join re_supplier_faultcode on re_supplier_faultcode.fault_code_id=fault_code.fault_code_id
	inner join re_vehicle_supplier on re_vehicle_supplier.relevance_id=re_supplier_faultcode.relevance_id
	inner join supplier on supplier.supplier_id=re_vehicle_supplier.supplier_id
	inner join vehicle on vehicle.vehicle_id=re_vehicle_supplier.vehicle_id
	inner join configuration_level on configuration_level.configuration_level_id=re_vehicle_supplier.configuration_level_id
	inner join module on module.module_id=re_vehicle_supplier.module_id
	where 1=1
	<if test="vehicleId !=null and vehicleId >0">
		and re_vehicle_supplier.vehicle_id=#{vehicleId,jdbcType=INTEGER}
	</if>
	<if test="configurationLevelId !=null and configurationLevelId >0">
		and re_vehicle_supplier.configuration_level_id=#{configurationLevelId,jdbcType=INTEGER}
	</if>
	<if test="moduleId !=null and moduleId >0">
		and re_vehicle_supplier.module_id=#{moduleId,jdbcType=INTEGER}
	</if>
	<if test="supplierId !=null and supplierId >0">
		and supplier.supplier_id=#{supplierId,jdbcType=INTEGER}
	</if>
	<if test="dtc !=null and dtc !=''">
		and fault_code.dtc like CONCAT('%',#{dtc,jdbcType=VARCHAR},'%')
	</if>
  </select>
  
  <!-- 查询重复故障码的条数 -->
  <select id="selectRepetitionFaultCodeRows" resultType="java.lang.Integer">
  	select count(fault_code.fault_code_id) from fault_code 
  	INNER JOIN re_supplier_faultcode ON re_supplier_faultcode.fault_code_id = fault_code.fault_code_id
  	where re_supplier_faultcode.relevance_id=#{relevanceId,jdbcType=INTEGER}
  	and fault_code.dtc=#{dtc,jdbcType=VARCHAR}
  	<if test="faultCodeId !=null and faultCodeId >0">
		and fault_code.fault_code_id!=#{faultCodeId,jdbcType=INTEGER}
	</if>
  </select>
  
  <!-- 查询故障码详情信息 -->
  <select id="selectFaultCodeById" resultMap="FaultCodeVoResultMap">
  	select re_supplier_faultcode.re_id, fault_code.dtc, fault_code.hex_dtc, fault_code.chinese_description, fault_code.english_description, 
		   fault_code.operating_conditions, fault_code.setting_conditions, fault_code.setting_after_conditions, fault_code.visitor_volume,
		   fault_code.restore_conditions, fault_code.activate_mil_regulations,fault_code.mil_off_regulations,fault_code.clear_conditions,
		   supplier.supplier_id, supplier.supplier_name, vehicle.vehicle_name, configuration_level.configuration_level_name, module.module_name,
		   re_supplier_faultcode.fault_code_id,re_vehicle_supplier.relevance_id
	from fault_code
	inner join re_supplier_faultcode on re_supplier_faultcode.fault_code_id=fault_code.fault_code_id
	inner join re_vehicle_supplier on re_vehicle_supplier.relevance_id=re_supplier_faultcode.relevance_id
	inner join supplier on supplier.supplier_id=re_vehicle_supplier.supplier_id
	inner join vehicle on vehicle.vehicle_id=re_vehicle_supplier.vehicle_id
	inner join configuration_level on configuration_level.configuration_level_id=re_vehicle_supplier.configuration_level_id
	inner join module on module.module_id=re_vehicle_supplier.module_id
	where 1=1
	<if test="relevanceId !=null and relevanceId >0">
		and re_supplier_faultcode.relevance_id=#{relevanceId,jdbcType=INTEGER}
	</if>
	order by fault_code.fault_code_id DESC
  </select>
</mapper>